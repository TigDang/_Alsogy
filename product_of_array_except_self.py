"""
–ó–∞–¥–∞—á–∞: –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

–î–∞–Ω —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ nums, –≤–µ—Ä–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ answer —Ç–∞–∫–æ–π, —á—Ç–æ answer[i] —Ä–∞–≤–µ–Ω 
–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ nums, –∫—Ä–æ–º–µ nums[i].

–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞ nums –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.

–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n) –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä—ã:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- 2 <= nums.length <= 10^5
- -30 <= nums[i] <= 30
- –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞ nums –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
"""


def product_of_array_except_self(nums: list[int]) -> list[int]:
    """
    –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
    
    –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:
    1. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–∞ –ø—Ä–æ—Ö–æ–¥–∞: —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
    2. –í –ø–µ—Ä–≤–æ–º –ø—Ä–æ—Ö–æ–¥–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    3. –í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–æ—Ö–æ–¥–µ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø—Ä–∞–≤–∞
    4. –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ O(1) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
    
    Args:
        nums: —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        
    Returns:
        —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    """

    result = []
    left = [1]
    right = [1]
    for i in range(1,len(nums)):
        right.append(right[i-1]*nums[i-1])
    for i in range(len(nums)-1, 0, -1):
        left.append(left[len(nums)-i-1]*nums[i])
    left.reverse()
    for i in range(len(nums)):
        result.append(left[i]*right[i])
    return result
    



def test_product_of_array_except_self():
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    nums1 = [1, 2, 3, 4]
    expected1 = [24, 12, 8, 6]
    result1 = product_of_array_except_self(nums1)
    assert result1 == expected1, f"–¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ—à–µ–ª: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected1}, –ø–æ–ª—É—á–µ–Ω–æ {result1}"
    print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ—à–µ–ª: [1,2,3,4] -> [24,12,8,6]")
    
    # –¢–µ—Å—Ç 2: –ú–∞—Å—Å–∏–≤ —Å –Ω—É–ª–µ–º
    nums2 = [-1, 1, 0, -3, 3]
    expected2 = [0, 0, 9, 0, 0]
    result2 = product_of_array_except_self(nums2)
    assert result2 == expected2, f"–¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ—à–µ–ª: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected2}, –ø–æ–ª—É—á–µ–Ω–æ {result2}"
    print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ—à–µ–ª: [-1,1,0,-3,3] -> [0,0,9,0,0]")
    
    # –¢–µ—Å—Ç 3: –ú–∞—Å—Å–∏–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    nums3 = [-1, -2, -3]
    expected3 = [6, 3, 2]
    result3 = product_of_array_except_self(nums3)
    assert result3 == expected3, f"–¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ—à–µ–ª: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected3}, –ø–æ–ª—É—á–µ–Ω–æ {result3}"
    print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ—à–µ–ª: [-1,-2,-3] -> [6,3,2]")
    
    # –¢–µ—Å—Ç 4: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
    nums4 = [2, 3]
    expected4 = [3, 2]
    result4 = product_of_array_except_self(nums4)
    assert result4 == expected4, f"–¢–µ—Å—Ç 4 –Ω–µ –ø—Ä–æ—à–µ–ª: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected4}, –ø–æ–ª—É—á–µ–Ω–æ {result4}"
    print("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ—à–µ–ª: [2,3] -> [3,2]")
    
    # –¢–µ—Å—Ç 5: –ú–∞—Å—Å–∏–≤ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
    nums5 = [1, 1, 1, 1]
    expected5 = [1, 1, 1, 1]
    result5 = product_of_array_except_self(nums5)
    assert result5 == expected5, f"–¢–µ—Å—Ç 5 –Ω–µ –ø—Ä–æ—à–µ–ª: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected5}, –ø–æ–ª—É—á–µ–Ω–æ {result5}"
    print("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ—à–µ–ª: [1,1,1,1] -> [1,1,1,1]")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def demonstrate_solution():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–µ—à–µ–Ω–∏—è"""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è ===")
    
    test_cases = [
        [1, 2, 3, 4],
        [-1, 1, 0, -3, 3],
        [2, 3, 4, 5]
    ]
    
    for i, nums in enumerate(test_cases, 1):
        print(f"\n–ü—Ä–∏–º–µ—Ä {i}:")
        print(f"–í—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤: {nums}")
        result = product_of_array_except_self(nums)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        print("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
        for j, num in enumerate(nums):
            other_nums = [nums[k] for k in range(len(nums)) if k != j]
            product = 1
            for x in other_nums:
                product *= x
            print(f"  answer[{j}] = –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {other_nums} = {product}")


if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –∑–∞–¥–∞—á–µ–π –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞!")
    print("\nüìù –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    print("–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ")
    print("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: O(n) –≤—Ä–µ–º—è, –±–µ–∑ –¥–µ–ª–µ–Ω–∏—è")
    
    print("\nüí° –î–ª—è —Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é product_of_array_except_self() –∏ –∑–∞–º–µ–Ω–∏—Ç–µ pass –Ω–∞ –≤–∞—à –∫–æ–¥")
    
    try:
        test_product_of_array_except_self()
    except AssertionError as e:
        print(f"\n‚ùå {e}")
        print("üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º!")
    except Exception as e:
        print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏")
    
    demonstrate_solution()