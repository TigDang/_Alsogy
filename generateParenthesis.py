"""
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:
Input: n = 1
Output: ["()"]
"""

def generateParenthesis(n):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ n –ø–∞—Ä —Å–∫–æ–±–æ–∫.
    
    Args:
        n (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–∫–æ–±–æ–∫
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–∫–æ–±–æ–∫
    """
    # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–¥–µ—Å—å
    
    # –ü–û–î–°–ö–ê–ó–ö–ê: –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å backtracking
    # 
    # –ò–¥–µ—è: —Å—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è:
    # - open_count: —Å–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
    # - close_count: —Å–∫–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
    #
    # –ü—Ä–∞–≤–∏–ª–∞:
    # 1. –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å '(' –µ—Å–ª–∏ open_count < n
    # 2. –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å ')' –µ—Å–ª–∏ close_count < open_count
    # 3. –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: open_count == close_count == n
    #
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –¥–ª—è n=2:
    # ""
    # ‚îú‚îÄ "(" (open=1, close=0)
    # ‚îÇ  ‚îú‚îÄ "((" (open=2, close=0)
    # ‚îÇ  ‚îÇ  ‚îî‚îÄ "(()" (open=2, close=1)
    # ‚îÇ  ‚îÇ     ‚îî‚îÄ "(())" ‚úì (open=2, close=2)
    # ‚îÇ  ‚îî‚îÄ "()( (open=1, close=1)
    # ‚îÇ     ‚îî‚îÄ "()()" ‚úì (open=2, close=2)


    def backtrack(current_string, open_count, close_count):
        if open_count == close_count == n:
            result.append(current_string)
            return
        
        if open_count < n:
            backtrack(current_string + "(", open_count + 1, close_count)
        
        if close_count < open_count:
            backtrack(current_string + ")", open_count, close_count + 1)
    
    result = []
    backtrack("", 0, 0)
    return result


def test_generateParenthesis():
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ generateParenthesis"""
    
    # –¢–µ—Å—Ç 1: n = 1
    result1 = generateParenthesis(1)
    expected1 = ["()"]
    assert sorted(result1) == sorted(expected1), f"Test 1 failed: expected {expected1}, got {result1}"
    print("‚úÖ –¢–µ—Å—Ç 1 (n=1) –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 2: n = 2
    result2 = generateParenthesis(2)
    expected2 = ["(())", "()()"]
    assert sorted(result2) == sorted(expected2), f"Test 2 failed: expected {expected2}, got {result2}"
    print("‚úÖ –¢–µ—Å—Ç 2 (n=2) –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 3: n = 3 (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä)
    result3 = generateParenthesis(3)
    expected3 = ["((()))", "(()())", "(())()", "()(())", "()()()"]
    assert sorted(result3) == sorted(expected3), f"Test 3 failed: expected {expected3}, got {result3}"
    print("‚úÖ –¢–µ—Å—Ç 3 (n=3) –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 4: n = 0 (–∫—Ä–∞–µ–≤–æ–π —Å–ª—É—á–∞–π)
    result4 = generateParenthesis(0)
    expected4 = [""]
    assert sorted(result4) == sorted(expected4), f"Test 4 failed: expected {expected4}, got {result4}"
    print("‚úÖ –¢–µ—Å—Ç 4 (n=0) –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 5: n = 4 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç)
    result5 = generateParenthesis(4)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∏—Å–ª—É –ö–∞—Ç–∞–ª–∞–Ω–∞: C_n = C_4 = 14
    expected_count = 14
    assert len(result5) == expected_count, f"Test 5 failed: expected {expected_count} combinations, got {len(result5)}"
    print("‚úÖ –¢–µ—Å—Ç 5 (n=4, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞) –ø—Ä–æ–π–¥–µ–Ω")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")


if __name__ == "__main__":
    print("=" * 50)
    print("–ó–ê–î–ê–ß–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    print("=" * 50)
    print()
    
    print("üìù –û–ø–∏—Å–∞–Ω–∏–µ:")
    print("–ù—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ n –ø–∞—Ä —Å–∫–æ–±–æ–∫")
    print()
    
    print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏—é —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö/–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫")
    print("2. –û—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ n")
    print("3. –ó–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±–æ–ª—å—à–µ —á–µ–º –∑–∞–∫—Ä—ã—Ç—ã—Ö")
    print("4. –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–ª–∏ n –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ n –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫")
    print()
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:")
    try:
        test_generateParenthesis()
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {e}")
        print()
        print("–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generateParenthesis –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–æ–≤–∞!")