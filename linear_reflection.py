"""
    –û–ø–∏—Å–∞–Ω–∏–µ
    –î–∞–Ω—ã n —Ç–æ—á–µ–∫ –Ω–∞ –¥–≤—É–º–µ—Ä–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –Ω–∞–π–¥–∏—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø—Ä—è–º–∞—è, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Å–∏ y, –∫–æ—Ç–æ—Ä–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏, –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø—Ä—è–º–∞—è, —á—Ç–æ –ø–æ—Å–ª–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—É—é –ø—Ä—è–º—É—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ—Ç—Ä–∞–∂–µ–Ω–Ω—ã—Ö.
    –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏.
"""

def has_reflection_symmetry(points):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Å–∏ y),
    –∫–æ—Ç–æ—Ä–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏.
    
    Args:
        points: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (x, y) - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏, False –∏–Ω–∞—á–µ
    """
    
    if len(points) == 0:
        return True

    def get_reflection(line, points):
        reflection_points = []
        for point in points:
            if point[0] == line:
                reflection_points.append(point)
            else:
                reflection_points.append((2 * line - point[0], point[1]))
        return reflection_points
    
    sorted_by_x = sorted(points, key=lambda x: x[0])

    if len(points)%2 == 0: # –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        symmetry_candidate = (sorted_by_x[len(points)//2][0] + sorted_by_x[len(points)//2 - 1][0])/2
    else: # –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        symmetry_candidate = sorted_by_x[len(points)//2][0]
    
    symmetry_set = set(get_reflection(symmetry_candidate, points))
    if symmetry_set == set(points):
        return True
    else:
        return False



def test_has_reflection_symmetry():
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 0
    points1 = [(-1, 0), (1, 0), (-2, 1), (2, 1)]
    assert has_reflection_symmetry(points1) == True, "–¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ—à–µ–ª: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 0"
    
    # –¢–µ—Å—Ç 2: –°–∏–º–º–µ—Ç—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 1
    points2 = [(0, 0), (2, 0), (0, 1), (2, 1)]
    assert has_reflection_symmetry(points2) == True, "–¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ—à–µ–ª: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 1"
    
    # –¢–µ—Å—Ç 3: –ù–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏
    points3 = [(0, 0), (1, 0), (2, 1)]
    assert has_reflection_symmetry(points3) == False, "–¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ—à–µ–ª: –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏–∏"
    
    # –¢–µ—Å—Ç 4: –û–¥–Ω–∞ —Ç–æ—á–∫–∞ (–≤—Å–µ–≥–¥–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞)
    points4 = [(5, 3)]
    assert has_reflection_symmetry(points4) == True, "–¢–µ—Å—Ç 4 –Ω–µ –ø—Ä–æ—à–µ–ª: –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞"
    
    # –¢–µ—Å—Ç 5: –î–≤–µ —Ç–æ—á–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π
    points5 = [(1, 2), (3, 2)]
    assert has_reflection_symmetry(points5) == True, "–¢–µ—Å—Ç 5 –Ω–µ –ø—Ä–æ—à–µ–ª: –¥–≤–µ —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã"
    
    # –¢–µ—Å—Ç 6: –î–≤–µ —Ç–æ—á–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    points6 = [(1, 2), (3, 4)]
    assert has_reflection_symmetry(points6) == False, "–¢–µ—Å—Ç 6 –Ω–µ –ø—Ä–æ—à–µ–ª: –¥–≤–µ —Ç–æ—á–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ y –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã"
    
    # –¢–µ—Å—Ç 7: –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏
    points7 = [(1, 1), (1, 1), (3, 1), (3, 1)]
    assert has_reflection_symmetry(points7) == True, "–¢–µ—Å—Ç 7 –Ω–µ –ø—Ä–æ—à–µ–ª: –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã"
    
    # –¢–µ—Å—Ç 8: –¢–æ—á–∫–∞ –Ω–∞ –æ—Å–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏
    points8 = [(0, 0), (2, 0), (2, 1), (0, 1), (1, 2)]
    assert has_reflection_symmetry(points8) == True, "–¢–µ—Å—Ç 8 –Ω–µ –ø—Ä–æ—à–µ–ª: —Ç–æ—á–∫–∞ –Ω–∞ –æ—Å–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏ x = 1"
    
    # –¢–µ—Å—Ç 9: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    points9 = []
    assert has_reflection_symmetry(points9) == True, "–¢–µ—Å—Ç 9 –Ω–µ –ø—Ä–æ—à–µ–ª: –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ"
    
    # –¢–µ—Å—Ç 10: –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
    points10 = [(-2, 1), (-1, 0), (0, 1), (1, 0), (2, 1), (0, 1)]
    assert has_reflection_symmetry(points10) == True, "–¢–µ—Å—Ç 10 –Ω–µ –ø—Ä–æ—à–µ–ª: —Å–∏–º–º–µ—Ç—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 0"
    
    # –¢–µ—Å—Ç 11: –ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π —Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π
    points11 = [(0, 0), (1, 1), (2, 0), (3, 1), (4, 2)]
    assert has_reflection_symmetry(points11) == False, "–¢–µ—Å—Ç 11 –Ω–µ –ø—Ä–æ—à–µ–ª: –Ω–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏"
    
    # –¢–µ—Å—Ç 12: –î—Ä–æ–±–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    points12 = [(0.5, 1), (1.5, 1), (0.5, 2), (1.5, 2)]
    assert has_reflection_symmetry(points12) == True, "–¢–µ—Å—Ç 12 –Ω–µ –ø—Ä–æ—à–µ–ª: —Å–∏–º–º–µ—Ç—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 1"
    
    print("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ‚úÖ")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_has_reflection_symmetry()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    example_points = [(-1, 0), (1, 0), (-2, 1), (2, 1)]
    result = has_reflection_symmetry(example_points)
    print(f"–¢–æ—á–∫–∏ {example_points} {'–∏–º–µ—é—Ç' if result else '–Ω–µ –∏–º–µ—é—Ç'} –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏")
    
    # –ö–û–ù–¢–†–ü–†–ò–ú–ï–† - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ
    print("\nüö® –ö–û–ù–¢–†–ü–†–ò–ú–ï–†:")
    counter_example = [(0, 0), (2, 0), (3, 0), (5, 0)]  # –°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 2.5
    print(f"–¢–æ—á–∫–∏: {counter_example}")
    print("–≠—Ç–∏ —Ç–æ—á–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ x = 2.5:")
    print("  (0,0) <-> (5,0), (2,0) <-> (3,0)")
    
    # –í–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–µ—Ä–µ—Ç –æ—Å—å x = 2.5 (–º–µ–∂–¥—É —Å—Ä–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏)
    sorted_points = sorted(counter_example, key=lambda x: x[0])
    print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {sorted_points}")
    chosen_axis = (sorted_points[len(counter_example)//2][0] + sorted_points[len(counter_example)//2 - 1][0])/2
    print(f"–í–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Å—å: x = {chosen_axis}")
    
    # –ò —ç—Ç–æ –ü–†–ê–í–ò–õ–¨–ù–û!
    result_counter = has_reflection_symmetry(counter_example)
    print(f"–í–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –≥–æ–≤–æ—Ä–∏—Ç: {result_counter}")
    
    if result_counter:
        print("‚úÖ –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–æ–∑–º–æ–∂–Ω–æ –≤–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ!")
    
    print(f"\nüí° –•–º... –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à –ø–æ–¥—Ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
    print("–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —Ç–æ—á–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã, —Ç–æ:")
    print("- –ü—Ä–∏ —á–µ—Ç–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: –æ—Å—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ä–µ–¥–Ω–∏–º–∏")  
    print("- –ü—Ä–∏ –Ω–µ—á–µ—Ç–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: –æ—Å—å —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞–Ω—É")
