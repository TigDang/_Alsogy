"""
–ó–∞–¥–∞—á–∞: –ü–∞–ª–∏–Ω–¥—Ä–æ–º –≤ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ

–î–∞–Ω head –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ true, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, 
–∏–Ω–∞—á–µ –≤–µ—Ä–Ω–∏—Ç–µ false.

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [1, 10^5]
- 0 <= Node.val <= 9

Follow up: –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —Ä–µ—à–∏—Ç—å –∑–∞ O(n) –≤—Ä–µ–º–µ–Ω–∏ –∏ O(1) –ø–∞–º—è—Ç–∏?

–ü—Ä–∏–º–µ—Ä—ã:
Input: head = [1,2,2,1]
Output: true

Input: head = [1,2]
Output: false
"""


class ListNode:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
    
    def __repr__(self):
        result = []
        current = self
        while current:
            result.append(str(current.val))
            current = current.next
        return " -> ".join(result)


def isPalindrome(head: ListNode) -> bool:
    """
    –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –∑–¥–µ—Å—å.
    
    Args:
        head: ListNode - –≥–æ–ª–æ–≤–∞ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    
    Returns:
        bool - True –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∞–ª–∏–Ω–¥—Ä–æ–º, False –∏–Ω–∞—á–µ
    """
    if not head or not head.next:
        return True
    
    # –≠—Ç–∞–ø 1: –ù–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞ (–∑–∞—è—Ü –∏ —á–µ—Ä–µ–ø–∞—Ö–∞)
    slow = head
    fast = head
    
    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next
    
    # slow —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã
    
    # –≠—Ç–∞–ø 2: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É
    def reverse_list(node):
        prev = None
        current = node
        while current:
            next_temp = current.next
            current.next = prev
            prev = current
            current = next_temp
        return prev
    
    second_half = reverse_list(slow.next)
    
    # –≠—Ç–∞–ø 3: –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—ã
    first_half = head
    while second_half:  # –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ
        if first_half.val != second_half.val:
            return False
        first_half = first_half.next
        second_half = second_half.next
    
    return True

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def create_linked_list(values):
    """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
    if not values:
        return None
    
    head = ListNode(values[0])
    current = head
    for val in values[1:]:
        current.next = ListNode(val)
        current = current.next
    return head


def test_isPalindrome():
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è"""
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    head1 = create_linked_list([1, 2, 2, 1])
    assert isPalindrome(head1) == True, "–¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: [1,2,2,1] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 2: –ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    head2 = create_linked_list([1, 2])
    assert isPalindrome(head2) == False, "–¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: [1,2] –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 3: –û–¥–∏–Ω–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    head3 = create_linked_list([1])
    assert isPalindrome(head3) == True, "–¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: [1] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 4: –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    head4 = create_linked_list([1, 2, 3, 2, 1])
    assert isPalindrome(head4) == True, "–¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: [1,2,3,2,1] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 5: –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    head5 = create_linked_list([1, 2, 3])
    assert isPalindrome(head5) == False, "–¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω: [1,2,3] –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 6: –í—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    head6 = create_linked_list([0, 0, 0])
    assert isPalindrome(head6) == True, "–¢–µ—Å—Ç 6 –ø—Ä–æ–≤–∞–ª–µ–Ω: [0,0,0] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 7: –î–ª–∏–Ω–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    head7 = create_linked_list([9, 1, 2, 9, 9, 2, 1, 9])
    assert isPalindrome(head7) == True, "–¢–µ—Å—Ç 7 –ø—Ä–æ–≤–∞–ª–µ–Ω: [9,1,2,9,9,2,1,9] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    # –¢–µ—Å—Ç 8: –î–ª–∏–Ω–Ω—ã–π –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    head8 = create_linked_list([1, 0, 3, 4, 0])
    assert isPalindrome(head8) == False, "–¢–µ—Å—Ç 8 –ø—Ä–æ–≤–∞–ª–µ–Ω: [1,0,3,4,0] –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")


if __name__ == "__main__":
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è...")
    print("üìù –ü—Ä–∏–º–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
    example1 = create_linked_list([1, 2, 2, 1])
    print(f"–ü—Ä–∏–º–µ—Ä 1: {example1}")
    
    example2 = create_linked_list([1, 2])
    print(f"–ü—Ä–∏–º–µ—Ä 2: {example2}")
    
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    try:
        test_isPalindrome()
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: {e}")
    
    print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:")
    print("1. –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º")
    print("2. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ O(1) –ø–∞–º—è—Ç–∏:")
    print("   - –ù–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞ (–±—ã—Å—Ç—Ä—ã–π/–º–µ–¥–ª–µ–Ω–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å)")
    print("   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É")
    print("   - –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—ã")
    print("   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫")